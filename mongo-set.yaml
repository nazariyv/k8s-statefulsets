#       Copyright 2020, noelmcloughlin
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### If you wait to do everything until you're sure it's right,
### you'll probably never do much of anything‚Äù ~ Win Borden

# refs:
#   https://docs.mongodb.com/manual/replication/#replication-in-mongodb
#   https://medium.com/codeops/how-to-setup-a-mongodb-replica-set-918f21da50ed
#   https://docs.bmc.com/docs/digitalworkplaceadvanced/1802/configuring-mongodb-for-replica-set-788652018.html
#   http://kubernetes.kansea.com/docs/user-guide/petset/bootstrapping
#   https://kubernetes.io/docs/concepts/cluster-administration/logging
#   https://doc.akka.io/docs/akka-management/current/bootstrap/kubernetes.html
#   https://www.bogotobogo.com/DevOps/Docker/Docker_MongoDB_with_StatefulSets_on_GCP_Kubernetes.php

# STORAGE CLASS
# ... delay volume binding until pods are scheduled

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local
  labels:
    type: local
    tier: infra
    environ: test
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
# provisioner: kubernetes.io/no-provisioner
provisioner: k8s.io/minikube-hostpath
parameters:
  pool: default
  description: Kubernetes volume
  fsType: xfs
  adminSecretNamespace: default
  adminSecretName: localos-secret
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
---
# PERSISTENT VOLUMES

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv1
  labels:
    app: mongo
    bind: mongo
    tier: infra
    environ: test
  annotations:
    #pv.beta.kubernetes.io/gid: "1234"
    "volume.alpha.kubernetes.io/node-affinity": '{
      "requiredDuringSchedulingIgnoredDuringExecution": {
        "nodeSelectorTerms": [
          { "matchExpressions": [
              { "key": "kubernetes.io/hostname",
                "operator": "In",
                "values": ["minikube"]
              }
          ]}
        ]}}'
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete #Retain
  storageClassName: local
  hostPath:
    type: DirectoryOrCreate
    path: /tmp/mongo-pv1
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv2
  labels:
    app: mongo
    bind: mongo
    tier: infra
    environ: test
  annotations:
    #pv.beta.kubernetes.io/gid: "1234"
    "volume.alpha.kubernetes.io/node-affinity": '{
      "requiredDuringSchedulingIgnoredDuringExecution": {
        "nodeSelectorTerms": [
          { "matchExpressions": [
              { "key": "kubernetes.io/hostname",
                "operator": "In",
                "values": ["minikube"]
              }
          ]}
        ]}}'
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete #Retain
  storageClassName: local
  hostPath:
    type: DirectoryOrCreate
    path: /tmp/mongo-pv2
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv3
  labels:
    app: mongo
    bind: mongo
    tier: infra
    environ: test
  annotations:
    #pv.beta.kubernetes.io/gid: "1234"
    "volume.alpha.kubernetes.io/node-affinity": '{
      "requiredDuringSchedulingIgnoredDuringExecution": {
        "nodeSelectorTerms": [
          { "matchExpressions": [
              { "key": "kubernetes.io/hostname",
                "operator": "In",
                "values": ["minikube"]
              }
          ]}
        ]}}'
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete #Retain
  storageClassName: local
  hostPath:
    type: DirectoryOrCreate
    path: /tmp/mongo-pv3
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv4
  labels:
    app: mongo
    bind: mongo
    tier: infra
    environ: test
  annotations:
    #pv.beta.kubernetes.io/gid: "1234"
    "volume.alpha.kubernetes.io/node-affinity": '{
      "requiredDuringSchedulingIgnoredDuringExecution": {
        "nodeSelectorTerms": [
          { "matchExpressions": [
              { "key": "kubernetes.io/hostname",
                "operator": "In",
                "values": ["minikube"]
              }
          ]}
        ]}}'
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete #Retain
  storageClassName: local
  hostPath:
    type: DirectoryOrCreate
    path: /tmp/mongo-pv4
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube
---
# SERVICE
## Headless service for stable dns names
##   mongo-0.mongo, mongo-1.mongo, mongo-2.mongo

apiVersion: v1
kind: Service
metadata:
  name: mongo
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "false"
  labels:
    app: mongo
    environ: test
spec:
  ports:
  - name: mongo-default
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongo
    type: mongo
  type: LoadBalancer

---
# CONFIGMAPS

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-master
  namespace: default
data:
  init-master.js: |-
    rs.initiate()
    db.createUser(
      {
        user: "myadmin",
        pwd: "myadmin",
        roles: [
          {
            role: "userAdminAnyDatabase",
            db: "admin"
          }
        ]
      }
    )

  init-hello.js: |-
    db.createUser(
      {
        user: "hello",
        pwd: "fresh",
        roles: [
          {
            role: "readWrite",
            db: "hello-world"
          }
        ]
      }
    )

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo
data:
  keyfile: |-
    Te/urcU4Pww+duwgVsrntSUkZrIMCmak8LTDtm0L8SzLBQGeHP01RdQ/uhnwAdIb
    8u8bg7k3t3ghZqvoZIfjDLlfFhQUf4QxUz0aJSiEEcAbo9ExArVbQzk8J7+yIRtu
    A6DzBNaj5Bzd69OwcDMXEONc29s+SCsEO2SVuvDtDwF2K3UAqerEv1qlVNzURPbs
    e60WU1/qpmX9urSRNNmdYA6neUQceSR0lJclDUzwzURRIMR5Xk534JpAbRcQ3DkJ
    KraQKusoLNmej6WIM8y2qcviwsEdpvBDJN0c4eZdyatlHkAwYrGTwBnKTeD7J+ik
    ZTehYF7+okMeX4xfVsSV2rYJzSU4XLugEDkKQzxUdHn1eMGQguNzeAHwyeloUoJc
    4GbwWFzTkBJZ4obhtIzcbHezDS1Aq32SbSuqvSPTSq5gGtwVeOtDW8N7YFy5UVdB
    YiLcZm/W4kxOu0i+sOwn/xt5jlVslzuQ65bc9oFTHw4K85nHupBUbxWvhWB8HDok
    hxawwHuD3a2ckXZ9nNcjOKM13LTnuZMmzz/Iuxz4/HxF5wajSnRo5yW+fzYO3Una
    /9gqhfxnp220Cxi+u3ArHgJQQfIUvRLwaDV100KfmjYS43HnkfYzqKyRXoLCeQ3O
    Ex/lFUKaVfVOBYDtHxnnOmA/8c/Nd2rO5axY/7CXgMIAEkyLYPaeVSJU2rGCKWwM
    jTujI2rV2dfIUevwzpQoo6+ik8B64bIA2sqfAa8qCnsmezcwKj6l4Vjjb92wkFoF
    iq4u0AMzZCO0vzu/x2Lq4nlu3CgAbLud5Yx3eGl7R1SQQ4oLCVdBvs/hiQKfjc7y
    XqoAFVsTfcoKU3ayTNeF8OpiT97w4uNTbk06B9qn+5E1T9xVq+d1TU7eGjVGszQK
    zHZW/xUXkPL0AVqg9AHNnbMwrGNFsVM5RelC3iqntsO52OEr3jsdBrpHvA98WoRE
    x7KsV/EJMrBHZGMkwc37VBGdgov6r4pfLfOIOOPmaGp8LewK

  mongod.conf.noauth: |-
    security:
       authorization: disabled

  mongod.conf: |-
    # mongod.conf

    # for documentation of all options, see:
    #   http://docs.mongodb.org/manual/reference/configuration-options/

    # Where and how to store data.
    # storage:
    #    dbPath: /var/lib/mongodb
    #    journal:
    #     enabled: true
    #  engine:
    #  mmapv1:
    #  wiredTiger:

    # network interfaces
    net:
       # bindIp: '0.0.0.0,::'
       bindIpAll: true
       ipv6: true
       port: 27017
       unixDomainSocket:
         enabled: true

    # https://docs.mongodb.com/manual/core/authentication
    # security:
    #    keyFile: /etc/mongo/keyfile
    #    authorization: enabled

    replication:
       replSetName: rs0

    setParameter:
       diagnosticDataCollectionEnabled: false


  init.sh: |+
    set -xe
    ###################################################
    ## init service - copy each configmap individually
    ###################################################

    ## configuration
    cp -p /mnt/config-init/mongod.conf /mnt/conf.d/mongod.conf
    cp -p /mnt/config-init/mongod.conf.noauth /mnt/conf.d/mongod.conf.noauth
    cp -p /mnt/config-init/run.sh /mnt/conf.d/run.sh
    cp -p /mnt/config-init/livenessProbe.sh /mnt/conf.d/livenessProbe.sh
    cp -p /mnt/config-init/readinessProbe.sh /mnt/conf.d/readinessProbe.sh
    cp -p /mnt/config-init/keyfile /mnt/conf.d/keyfile
    chmod 400 /mnt/conf.d/keyfile
    chmod +x /mnt/conf.d/*.sh
    chown mongodb /mnt/conf.d/run.sh /mnt/conf.d/mongod.conf

    ## initialization
    cp -p /mnt/config-dbs/init-master.js /mnt/conf.d/init-master.js || true
    cp -p /mnt/config-dbs/init-hello.js /mnt/conf.d/init-hello.js || true

    # initialize db
    ORDINAL=1 && [ "${HOSTNAME}" = "mongo-0" ] && ORDINAL=0
    if [ -f /etc/podinfo/pod_name ]; then
        ORDINAL="$( cat /etc/podinfo/pod_name | rev | cut -d- -f1 )"
    fi
    if [ "$ORDINAL" -eq "0" ]; then
        mongod --config /mnt/conf.d/mongod.conf.noauth &
        sleep 30
        mongo localhost:27017/admin /mnt/conf.d/init-master.js
        # mongo localhost:27017/admin /mnt/conf.d/init-hello.js  # this fails. why?
    fi

  run.sh: |+
    set -xe
    mongod --config /etc/mongo/mongod.conf

  livenessProbe.sh: |+
    echo "mongo --eval db.adminCommand('ping')"    # todo: determine best check

  readinessProbe.sh: |+
    echo "mongo --eval db.adminCommand('ping')"    # todo: determine best check

---
#SECRETS

apiVersion: v1
kind: Secret
metadata:
  name: mongo
type: Opaque
data:
  MONGO_INITDB_ROOT_USERNAME: YWRtaW4=
  MONGO_INITDB_ROOT_PASSWORD: YWRtaW4=
stringData:
  MONGO_INITDB_ROOT_USERNAME: admin
  MONGO_INITDB_ROOT_PASSWORD: admin
  MONGO_INITDB_DATABASE: admin
---
# STATEFULSET

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  labels:
    app: mongo
    environ: test
spec:
  serviceName: mongo
  replicas: 3
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: mongo
      environ: test
  template:
    metadata:
      labels:
        app: mongo
        environ: test
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: init
        image: mongo
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - /mnt/config-init/init.sh
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d/
          readOnly: false
        - name: config-init
          mountPath: /mnt/config-init/
        - name: podinfo
          mountPath: /etc/podinfo/
          readOnly: false
        - name: config-master
          mountPath: /mnt/config-dbs/
          readOnly: false

      containers:
      - name: mongo
        image: noelmcloughlin/mongo
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - /etc/mongo/run.sh
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo
              key: MONGO_INITDB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: mongo
              key: MONGO_INITDB_DATABASE
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: mongo-default
          containerPort: 27017
        resources:
          limits:
            memory: 500Mi
          requests:
            memory: 500Mi
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - '-c'
              - echo 'goodbye world'
        livenessProbe:
          exec:
            command:
            - bash
            - /etc/mongo/livenessProbe.sh
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - bash
            - /etc/mongo/readinessProbe.sh
          initialDelaySeconds: 30
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 3
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError # File
        volumeMounts:
        - name: conf
          mountPath: /etc/mongo
          readOnly: false
        - name: data
          mountPath: /var/lib/mongodb
          readOnly: false

      volumes:
      - name: conf
        emptyDir: {}
      - name: config-master
        configMap:
          name: config-master
      - name: config-init
        configMap:
          name: mongo
      - name: podinfo
        ## init containers may use this to find cluster peers
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace

  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          volume.beta.kubernetes.io/storage-class: local
      spec:
        storageClassName: local
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 500m
        selector:
          matchLabels:
            bind: mongo
